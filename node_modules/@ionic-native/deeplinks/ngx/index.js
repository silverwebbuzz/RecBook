import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Deeplinks = /** @class */ (function (_super) {
    __extends(Deeplinks, _super);
    function Deeplinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Deeplinks.prototype.route = function (paths) { return cordova(this, "route", { "observable": true }, arguments); };
    Deeplinks.prototype.routeWithNavController = function (navController, paths, options) { return cordova(this, "routeWithNavController", { "observable": true }, arguments); };
    Deeplinks.pluginName = "Deeplinks";
    Deeplinks.plugin = "ionic-plugin-deeplinks";
    Deeplinks.pluginRef = "IonicDeeplink";
    Deeplinks.repo = "https://github.com/ionic-team/ionic-plugin-deeplinks";
    Deeplinks.install = "ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/";
    Deeplinks.installVariables = ["URL_SCHEME", "DEEPLINK_SCHEME", "DEEPLINK_HOST", "ANDROID_PATH_PREFIX"];
    Deeplinks.platforms = ["Android", "Browser", "iOS"];
    Deeplinks = __decorate([
        Injectable()
    ], Deeplinks);
    return Deeplinks;
}(IonicNativePlugin));
export { Deeplinks };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RlZXBsaW5rcy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQWlHSCw2QkFBaUI7Ozs7SUFjOUMseUJBQUssYUFBQyxLQUFVO0lBNkJoQiwwQ0FBc0IsYUFDcEIsYUFBa0IsRUFDbEIsS0FBVSxFQUNWLE9BQXlCOzs7Ozs7OztJQTlDaEIsU0FBUztRQURyQixVQUFVLEVBQUU7T0FDQSxTQUFTO29CQW5HdEI7RUFtRytCLGlCQUFpQjtTQUFuQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVlcGxpbmtNYXRjaCB7XG4gIC8qKlxuICAgKiBUaGUgcm91dGUgaW5mbyBmb3IgdGhlIG1hdGNoZWQgcm91dGVcbiAgICovXG4gICRyb3V0ZTogYW55O1xuXG4gIC8qKlxuICAgKiBBbnkgYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgdGhyb3VnaCByb3V0ZSBwYXJhbWV0ZXJzIG9yIEdFVCBwYXJhbWV0ZXJzXG4gICAqL1xuICAkYXJnczogYW55O1xuXG4gIC8qKlxuICAgKiBUaGUgZGVlcGxpbmsgb2JqZWN0IHByb2Nlc3NlZCBmcm9tIHRoZSBwbHVnaW4sIGFsb25nIHdpdGggYW55XG4gICAqIGFueSBpbnRlcm5hbCBuYXRpdmUgZGF0YSBhdmFpbGFibGUgYXMgXCJleHRyYXNcIiBhdCB0aGUgdGltZVxuICAgKiB0aGUgcm91dGUgd2FzIG1hdGNoZWQgKGZvciBleGFtcGxlLCBGYWNlYm9vayBzb21ldGltZXMgYWRkcyBleHRyYSBkYXRhKVxuICAgKi9cbiAgJGxpbms6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWVwbGlua09wdGlvbnMge1xuICAvKipcbiAgICogU2V0IHRoZSBtYXRjaGVkIHJvdXRlIGFzIHJvb3QgcGFnZSB1c2luZyBgbmF2Q3RybC5zZXRSb290KClgIG1ldGhvZC5cbiAgICovXG4gIHJvb3Q6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQG5hbWUgRGVlcGxpbmtzXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBwbHVnaW4gaGFuZGxlcyBkZWVwbGlua3Mgb24gaU9TIGFuZCBBbmRyb2lkIGZvciBib3RoIGN1c3RvbSBVUkwgc2NoZW1lIGxpbmtzXG4gKiBhbmQgVW5pdmVyc2FsIEFwcCBMaW5rcy5cbiAqXG4gKiBQbGVhc2UgcmVhZCB0aGUgW2lvbmljIHBsdWdpbiBkZWVwbGlua3MgZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtcGx1Z2luLWRlZXBsaW5rcykgZm9yIGlPUyBhbmQgQW5kcm9pZCBpbnRlZ3JhdGlvbi5cbiAqIFlvdSBtdXN0IGFkZCBgdW5pdmVyc2FsLWxpbmtzYCB0byB5b3VyIGBjb25maWcueG1sYCBhbmQgc2V0IHVwIEFwcGxlIEFwcCBTaXRlIEFzc29jaWF0aW9uIChBQVNBKSBmb3IgaU9TIGFuZCBBc3NldCBMaW5rcyBmb3IgQW5kcm9pZC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERlZXBsaW5rcyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZGVlcGxpbmtzL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkZWVwbGlua3M6IERlZXBsaW5rcykgeyB9XG4gKlxuICogdGhpcy5kZWVwbGlua3Mucm91dGUoe1xuICogICAgICAnL2Fib3V0LXVzJzogQWJvdXRQYWdlLFxuICogICAgICAnL3VuaXZlcnNhbC1saW5rcy10ZXN0JzogQWJvdXRQYWdlLFxuICogICAgICAnL3Byb2R1Y3RzLzpwcm9kdWN0SWQnOiBQcm9kdWN0UGFnZVxuICogICAgfSkuc3Vic2NyaWJlKG1hdGNoID0+IHtcbiAqICAgICAgLy8gbWF0Y2guJHJvdXRlIC0gdGhlIHJvdXRlIHdlIG1hdGNoZWQsIHdoaWNoIGlzIHRoZSBtYXRjaGVkIGVudHJ5IGZyb20gdGhlIGFyZ3VtZW50cyB0byByb3V0ZSgpXG4gKiAgICAgIC8vIG1hdGNoLiRhcmdzIC0gdGhlIGFyZ3MgcGFzc2VkIGluIHRoZSBsaW5rXG4gKiAgICAgIC8vIG1hdGNoLiRsaW5rIC0gdGhlIGZ1bGwgbGluayBkYXRhXG4gKiAgICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgbWF0Y2hlZCByb3V0ZScsIG1hdGNoKTtcbiAqICAgIH0sIG5vbWF0Y2ggPT4ge1xuICogICAgICAvLyBub21hdGNoLiRsaW5rIC0gdGhlIGZ1bGwgbGluayBkYXRhXG4gKiAgICAgIGNvbnNvbGUuZXJyb3IoJ0dvdCBhIGRlZXBsaW5rIHRoYXQgZGlkblxcJ3QgbWF0Y2gnLCBub21hdGNoKTtcbiAqICAgIH0pO1xuICogYGBgXG4gKlxuICogQWx0ZXJuYXRpdmVseSwgaWYgeW91J3JlIHVzaW5nIElvbmljLCB0aGVyZSdzIGEgY29udmVuaWVuY2UgbWV0aG9kIHRoYXQgdGFrZXMgYSByZWZlcmVuY2UgdG8gYSBgTmF2Q29udHJvbGxlcmAgYW5kIGhhbmRsZXNcbiAqIHRoZSBhY3R1YWwgbmF2aWdhdGlvbiBmb3IgeW91OlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHRoaXMuZGVlcGxpbmtzLnJvdXRlV2l0aE5hdkNvbnRyb2xsZXIodGhpcy5uYXZDb250cm9sbGVyLCB7XG4gKiAgICcvYWJvdXQtdXMnOiBBYm91dFBhZ2UsXG4gKiAgICcvcHJvZHVjdHMvOnByb2R1Y3RJZCc6IFByb2R1Y3RQYWdlXG4gKiB9KS5zdWJzY3JpYmUobWF0Y2ggPT4ge1xuICogICAgIC8vIG1hdGNoLiRyb3V0ZSAtIHRoZSByb3V0ZSB3ZSBtYXRjaGVkLCB3aGljaCBpcyB0aGUgbWF0Y2hlZCBlbnRyeSBmcm9tIHRoZSBhcmd1bWVudHMgdG8gcm91dGUoKVxuICogICAgIC8vIG1hdGNoLiRhcmdzIC0gdGhlIGFyZ3MgcGFzc2VkIGluIHRoZSBsaW5rXG4gKiAgICAgLy8gbWF0Y2guJGxpbmsgLSB0aGUgZnVsbCBsaW5rIGRhdGFcbiAqICAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IG1hdGNoZWQgcm91dGUnLCBtYXRjaCk7XG4gKiAgIH0sIG5vbWF0Y2ggPT4ge1xuICogICAgIC8vIG5vbWF0Y2guJGxpbmsgLSB0aGUgZnVsbCBsaW5rIGRhdGFcbiAqICAgICBjb25zb2xlLmVycm9yKCdHb3QgYSBkZWVwbGluayB0aGF0IGRpZG5cXCd0IG1hdGNoJywgbm9tYXRjaCk7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogU2VlIHRoZSBbSW9uaWMgRGVlcGxpbmtzIERlbW9dKGh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljMi1kZWVwbGlua3MtZGVtby9ibG9iL21hc3Rlci9hcHAvYXBwLnRzKSBmb3IgYW4gZXhhbXBsZSBvZiBob3cgdG9cbiAqIHJldHJpZXZlIHRoZSBgTmF2Q29udHJvbGxlcmAgcmVmZXJlbmNlIGF0IHJ1bnRpbWUuXG4gKlxuICogQGludGVyZmFjZXNcbiAqIERlZXBsaW5rTWF0Y2hcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEZWVwbGlua3MnLFxuICBwbHVnaW46ICdpb25pYy1wbHVnaW4tZGVlcGxpbmtzJyxcbiAgcGx1Z2luUmVmOiAnSW9uaWNEZWVwbGluaycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1wbHVnaW4tZGVlcGxpbmtzJyxcbiAgaW5zdGFsbDpcbiAgICAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGlvbmljLXBsdWdpbi1kZWVwbGlua3MgLS12YXJpYWJsZSBVUkxfU0NIRU1FPW15YXBwIC0tdmFyaWFibGUgREVFUExJTktfU0NIRU1FPWh0dHBzIC0tdmFyaWFibGUgREVFUExJTktfSE9TVD1leGFtcGxlLmNvbSAtLXZhcmlhYmxlIEFORFJPSURfUEFUSF9QUkVGSVg9LycsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFtcbiAgICAnVVJMX1NDSEVNRScsXG4gICAgJ0RFRVBMSU5LX1NDSEVNRScsXG4gICAgJ0RFRVBMSU5LX0hPU1QnLFxuICAgICdBTkRST0lEX1BBVEhfUFJFRklYJ1xuICBdLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlZXBsaW5rcyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIERlZmluZSBhIHNldCBvZiBwYXRocyB0byBtYXRjaCBhZ2FpbnN0IGluY29taW5nIGRlZXBsaW5rcy5cbiAgICpcbiAgICogQHBhcmFtIHtwYXRoc30gcGF0aHMgRGVmaW5lIGEgc2V0IG9mIHBhdGhzIHRvIG1hdGNoIGFnYWluc3QgaW5jb21pbmcgZGVlcGxpbmtzLlxuICAgKiBwYXRocyB0YWtlcyBhbiBvYmplY3Qgb2YgdGhlIGZvcm0geyAncGF0aCc6IGRhdGEgfS4gSWYgYSBkZWVwbGlua1xuICAgKiBtYXRjaGVzIHRoZSBwYXRoLCB0aGUgcmVzdWx0aW5nIHBhdGgtZGF0YSBwYWlyIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlXG4gICAqIHByb21pc2UgcmVzdWx0IHdoaWNoIHlvdSBjYW4gdGhlbiB1c2UgdG8gbmF2aWdhdGUgaW4gdGhlIGFwcCBhcyB5b3Ugc2VlIGZpdC5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8RGVlcGxpbmtNYXRjaD59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGlzIGNhbGxlZCBlYWNoIHRpbWUgYSBkZWVwbGluayBjb21lcyB0aHJvdWdoLCBhbmRcbiAgICogZXJyb3JzIGlmIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCB0aGF0IGRvZXMgbm90IG1hdGNoIGEgZ2l2ZW4gcGF0aC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlXG4gIH0pXG4gIHJvdXRlKHBhdGhzOiBhbnkpOiBPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIHZlcnNpb24gb2YgYHJvdXRlYCB0aGF0IHRha2VzIGEgcmVmZXJlbmNlIHRvIGEgTmF2Q29udHJvbGxlclxuICAgKiBmcm9tIElvbmljLCBvciBhIGN1c3RvbSBjbGFzcyB0aGF0IGNvbmZvcm1zIHRvIHRoaXMgcHJvdG9jb2w6XG4gICAqXG4gICAqIE5hdkNvbnRyb2xsZXIucHVzaCA9IGZ1bmN0aW9uKFZpZXcsIFBhcmFtcyl7fVxuICAgKlxuICAgKiBUaGlzIGhhbmRsZXIgd2lsbCBhdXRvbWF0aWNhbGx5IG5hdmlnYXRlIHdoZW4gYSByb3V0ZSBtYXRjaGVzLiBJZiB5b3UgbmVlZCBmaW5lci1ncmFpbmVkXG4gICAqIGNvbnRyb2wgb3ZlciB0aGUgYmVoYXZpb3Igb2YgYSBtYXRjaGluZyBkZWVwbGluaywgdXNlIHRoZSBwbGFpbiBgcm91dGVgIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtOYXZ9IG5hdkNvbnRyb2xsZXIgRGVmaW5lIGEgc2V0IG9mIHBhdGhzIHRvIG1hdGNoIGFnYWluc3QgaW5jb21pbmcgZGVlcGxpbmtzLlxuICAgKiBwYXRocyB0YWtlcyBhbiBvYmplY3Qgb2YgdGhlIGZvcm0geyAncGF0aCc6IGRhdGEgfS4gSWYgYSBkZWVwbGlua1xuICAgKiBtYXRjaGVzIHRoZSBwYXRoLCB0aGUgcmVzdWx0aW5nIHBhdGgtZGF0YSBwYWlyIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlXG4gICAqIHByb21pc2UgcmVzdWx0IHdoaWNoIHlvdSBjYW4gdGhlbiB1c2UgdG8gbmF2aWdhdGUgaW4gdGhlIGFwcCBhcyB5b3Ugc2VlIGZpdC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhdGhzXG4gICAqXG4gICAqIEBwYXJhbSB7RGVlcGxpbmtPcHRpb25zfSBvcHRpb25zXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCByZXNvbHZlcyBlYWNoIHRpbWUgYSBkZWVwbGluayBjb21lcyB0aHJvdWdoLCBhbmRcbiAgICogZXJyb3JzIGlmIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCB0aGF0IGRvZXMgbm90IG1hdGNoIGEgZ2l2ZW4gcGF0aC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlXG4gIH0pXG4gIHJvdXRlV2l0aE5hdkNvbnRyb2xsZXIoXG4gICAgbmF2Q29udHJvbGxlcjogYW55LFxuICAgIHBhdGhzOiBhbnksXG4gICAgb3B0aW9ucz86IERlZXBsaW5rT3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==